// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: reviews.sql

package dbs

import (
	"context"
	"database/sql"
	"time"
)

const reviewNew = `-- name: ReviewNew :one
INSERT INTO reviews (parent_id, company_id, content, created_by, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type ReviewNewParams struct {
	ParentID  sql.NullInt64
	CompanyID int64
	Content   string
	CreatedBy int64
	CreatedAt time.Time
}

func (q *Queries) ReviewNew(ctx context.Context, arg ReviewNewParams) (int64, error) {
	row := q.queryRow(ctx, q.reviewNewStmt, reviewNew,
		arg.ParentID,
		arg.CompanyID,
		arg.Content,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const reviewsNested = `-- name: ReviewsNested :many
WITH RECURSIVE nested AS (
    SELECT r.id, r.parent_id, r.company_id, r.content, r.created_by, r.created_at
    FROM reviews r
    WHERE r.id = $2::BIGINT
        UNION ALL
    SELECT r.id, r.parent_id, r.company_id, r.content, r.created_by, r.created_at
    FROM reviews r
        INNER JOIN nested n ON (r.parent_id = n.id)
)
SELECT id, parent_id, company_id, content, created_by, created_at
FROM nested n
WHERE n.company_id = $1::BIGINT
`

type ReviewsNestedParams struct {
	CompanyID int64
	ID        int64
}

type ReviewsNestedRow struct {
	ID        int64
	ParentID  sql.NullInt64
	CompanyID int64
	Content   string
	CreatedBy int64
	CreatedAt time.Time
}

func (q *Queries) ReviewsNested(ctx context.Context, arg ReviewsNestedParams) ([]ReviewsNestedRow, error) {
	rows, err := q.query(ctx, q.reviewsNestedStmt, reviewsNested, arg.CompanyID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReviewsNestedRow
	for rows.Next() {
		var i ReviewsNestedRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CompanyID,
			&i.Content,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reviewsRootByCompany = `-- name: ReviewsRootByCompany :many
SELECT id, parent_id, company_id, content, created_by, created_at
FROM reviews
WHERE company_id = $1
  AND parent_id IS NULL
`

func (q *Queries) ReviewsRootByCompany(ctx context.Context, companyID int64) ([]Review, error) {
	rows, err := q.query(ctx, q.reviewsRootByCompanyStmt, reviewsRootByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.CompanyID,
			&i.Content,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
