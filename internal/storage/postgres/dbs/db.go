// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0

package dbs

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.companyNewAndGetIDStmt, err = db.PrepareContext(ctx, companyNewAndGetID); err != nil {
		return nil, fmt.Errorf("error preparing query CompanyNewAndGetID: %w", err)
	}
	if q.reviewNewStmt, err = db.PrepareContext(ctx, reviewNew); err != nil {
		return nil, fmt.Errorf("error preparing query ReviewNew: %w", err)
	}
	if q.reviewsNestedStmt, err = db.PrepareContext(ctx, reviewsNested); err != nil {
		return nil, fmt.Errorf("error preparing query ReviewsNested: %w", err)
	}
	if q.reviewsRootByCompanyStmt, err = db.PrepareContext(ctx, reviewsRootByCompany); err != nil {
		return nil, fmt.Errorf("error preparing query ReviewsRootByCompany: %w", err)
	}
	if q.userGetByIDStmt, err = db.PrepareContext(ctx, userGetByID); err != nil {
		return nil, fmt.Errorf("error preparing query UserGetByID: %w", err)
	}
	if q.userNewStmt, err = db.PrepareContext(ctx, userNew); err != nil {
		return nil, fmt.Errorf("error preparing query UserNew: %w", err)
	}
	if q.userNewAndGetStmt, err = db.PrepareContext(ctx, userNewAndGet); err != nil {
		return nil, fmt.Errorf("error preparing query UserNewAndGet: %w", err)
	}
	if q.usersStmt, err = db.PrepareContext(ctx, users); err != nil {
		return nil, fmt.Errorf("error preparing query Users: %w", err)
	}
	if q.usersCountStmt, err = db.PrepareContext(ctx, usersCount); err != nil {
		return nil, fmt.Errorf("error preparing query UsersCount: %w", err)
	}
	if q.vacancyByCompaniesStmt, err = db.PrepareContext(ctx, vacancyByCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query VacancyByCompanies: %w", err)
	}
	if q.vacancyNewStmt, err = db.PrepareContext(ctx, vacancyNew); err != nil {
		return nil, fmt.Errorf("error preparing query VacancyNew: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.companyNewAndGetIDStmt != nil {
		if cerr := q.companyNewAndGetIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing companyNewAndGetIDStmt: %w", cerr)
		}
	}
	if q.reviewNewStmt != nil {
		if cerr := q.reviewNewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reviewNewStmt: %w", cerr)
		}
	}
	if q.reviewsNestedStmt != nil {
		if cerr := q.reviewsNestedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reviewsNestedStmt: %w", cerr)
		}
	}
	if q.reviewsRootByCompanyStmt != nil {
		if cerr := q.reviewsRootByCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reviewsRootByCompanyStmt: %w", cerr)
		}
	}
	if q.userGetByIDStmt != nil {
		if cerr := q.userGetByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userGetByIDStmt: %w", cerr)
		}
	}
	if q.userNewStmt != nil {
		if cerr := q.userNewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userNewStmt: %w", cerr)
		}
	}
	if q.userNewAndGetStmt != nil {
		if cerr := q.userNewAndGetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userNewAndGetStmt: %w", cerr)
		}
	}
	if q.usersStmt != nil {
		if cerr := q.usersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing usersStmt: %w", cerr)
		}
	}
	if q.usersCountStmt != nil {
		if cerr := q.usersCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing usersCountStmt: %w", cerr)
		}
	}
	if q.vacancyByCompaniesStmt != nil {
		if cerr := q.vacancyByCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing vacancyByCompaniesStmt: %w", cerr)
		}
	}
	if q.vacancyNewStmt != nil {
		if cerr := q.vacancyNewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing vacancyNewStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	companyNewAndGetIDStmt   *sql.Stmt
	reviewNewStmt            *sql.Stmt
	reviewsNestedStmt        *sql.Stmt
	reviewsRootByCompanyStmt *sql.Stmt
	userGetByIDStmt          *sql.Stmt
	userNewStmt              *sql.Stmt
	userNewAndGetStmt        *sql.Stmt
	usersStmt                *sql.Stmt
	usersCountStmt           *sql.Stmt
	vacancyByCompaniesStmt   *sql.Stmt
	vacancyNewStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		companyNewAndGetIDStmt:   q.companyNewAndGetIDStmt,
		reviewNewStmt:            q.reviewNewStmt,
		reviewsNestedStmt:        q.reviewsNestedStmt,
		reviewsRootByCompanyStmt: q.reviewsRootByCompanyStmt,
		userGetByIDStmt:          q.userGetByIDStmt,
		userNewStmt:              q.userNewStmt,
		userNewAndGetStmt:        q.userNewAndGetStmt,
		usersStmt:                q.usersStmt,
		usersCountStmt:           q.usersCountStmt,
		vacancyByCompaniesStmt:   q.vacancyByCompaniesStmt,
		vacancyNewStmt:           q.vacancyNewStmt,
	}
}
